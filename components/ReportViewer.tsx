
import React, { useMemo, useEffect, useRef, useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import type { ReportParameters, SymbiosisContext } from '../types.ts';
import { DownloadIcon, LetterIcon, NexusLogo } from './Icons.tsx';
import Card from './common/Card.tsx';

// Declare global variables from CDNs
declare var marked: any;

interface ReportViewerProps {
  content: string;
  parameters: ReportParameters;
  isGenerating: boolean;
  onReset: () => void;
  onStartSymbiosis: (context: SymbiosisContext) => void;
  onGenerateLetter: () => void;
  error: string | null;
}

const NsilChart: React.FC<{ jsonString: string }> = ({ jsonString }) => {
  try {
    const chartData = JSON.parse(jsonString);
    if (chartData.type === 'bar' && Array.isArray(chartData.data)) {
      return (
        <Card className="my-6 bg-nexus-primary-800/50">
            <h4 className="text-lg font-semibold mb-4 text-center text-nexus-text-primary">{chartData.title || "Component Analysis"}</h4>
            <div style={{ width: '100%', height: 300 }}>
                <ResponsiveContainer>
                    <BarChart data={chartData.data} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
                        <XAxis dataKey="name" stroke="var(--text-secondary)" />
                        <YAxis stroke="var(--text-secondary)" />
                        <Tooltip contentStyle={{ backgroundColor: 'var(--surface-color)', border: '1px solid var(--border-color)', color: 'var(--text-primary)' }} />
                        <Legend wrapperStyle={{color: 'var(--text-primary)'}}/>
                        <Bar dataKey="value" fill="var(--secondary-accent)" />
                    </BarChart>
                </ResponsiveContainer>
            </div>
        </Card>
      );
    }
    return <pre className="bg-red-900/50 p-2 rounded-md text-xs text-red-300">Invalid chart data format.</pre>;
  } catch (e) {
    return <pre className="bg-red-900/50 p-2 rounded-md text-xs text-red-300">Failed to parse chart JSON.</pre>;
  }
};

const ReportMetadata: React.FC<{ parameters: ReportParameters }> = ({ parameters }) => (
    <div className="blueprint-header mb-0">
        <div className="flex justify-between items-start">
            <div>
                <p className="text-sm text-nexus-text-secondary">INTELLIGENCE BLUEPRINT</p>
                <h1 className="text-3xl font-extrabold text-nexus-text-primary mt-1">{parameters.reportName}</h1>
                <p className="text-md text-nexus-text-secondary mt-1">{parameters.region} — {parameters.industry.join(' / ')}</p>
            </div>
            <div className="text-right">
                <p className="text-sm text-nexus-text-secondary">ANALYST PERSONA</p>
                <span className="blueprint-persona-tag mt-1">{parameters.aiPersona.join(' + ')}</span>
            </div>
        </div>
        <div className="mt-6 pt-4 border-t border-nexus-border-medium grid grid-cols-2 md:grid-cols-4 gap-x-6 gap-y-3 text-xs font-mono">
            <div><strong className="text-nexus-text-secondary block">OPERATOR:</strong> <span className="text-nexus-text-primary">{parameters.userName}</span></div>
            <div><strong className="text-nexus-text-secondary block">DEPARTMENT:</strong> <span className="text-nexus-text-primary">{parameters.userDepartment}</span></div>
            <div><strong className="text-nexus-text-secondary block">REPORT TIERS:</strong> <span className="text-nexus-text-primary">{parameters.tier.join(', ')}</span></div>
            <div><strong className="text-nexus-text-secondary block">DATE:</strong> <span className="text-nexus-text-primary">{new Date().toLocaleDateString()}</span></div>
        </div>
    </div>
);

const ReportDisclaimer: React.FC = () => (
    <div className="mb-8 p-4 bg-nexus-primary-800/50 border border-nexus-border-medium rounded-lg text-nexus-text-secondary text-sm">
        <p><strong>Disclaimer:</strong> This report is generated by an AI-Human Intelligence Platform and is intended for guidance and decision-support only. Information is sourced from publicly available data and should be independently verified before making any strategic or financial commitments. BWGA makes no warranties as to its absolute completeness or accuracy.</p>
    </div>
);

const ReportFooter: React.FC = () => (
    <footer className="mt-12 pt-6 border-t-2 border-nexus-border-medium text-center text-xs text-nexus-text-muted">
        <p className="font-semibold">Report Generated by BWGA Nexus 7.0 AI-Human Intelligence Platform</p>
        <p>© {new Date().getFullYear()} Brayden Walls Global Advisory</p>
    </footer>
);

const ReportLoadingIndicator: React.FC = () => {
    const [message, setMessage] = useState("Initializing Nexus AI core...");
    const messages = [
        "Accessing global data streams...",
        "Synthesizing analyst perspectives...",
        "Applying analytical frameworks...",
        "Searching for real-world corporate partners...",
        "Structuring intelligence blueprint...",
        "Cross-referencing data sources for accuracy...",
        "Finalizing strategic recommendations...",
    ];

    useEffect(() => {
        let index = 0;
        const intervalId = setInterval(() => {
            index = (index + 1) % messages.length;
            setMessage(messages[index]);
        }, 2500);
        return () => clearInterval(intervalId);
    }, []);

    return (
        <div className="flex flex-col items-center justify-center text-center text-nexus-text-secondary p-8 my-8">
            <NexusLogo className="w-16 h-16 text-nexus-accent-gold animate-pulse" />
            <p className="mt-4 text-lg font-semibold">{message}</p>
            <p className="text-sm mt-1">Please wait, this process can take a moment as the AI builds your report.</p>
        </div>
    );
};


const ReportViewer: React.FC<ReportViewerProps> = ({ 
    content, 
    parameters, 
    isGenerating, 
    onReset,
    onStartSymbiosis,
    onGenerateLetter,
    error,
}) => {
  const reportContainerRef = useRef<HTMLDivElement>(null);
  const [isDownloading, setIsDownloading] = useState(false);

    const handleDownloadPdf = async () => {
    const reportElement = reportContainerRef.current?.querySelector('.blueprint-render-area');
    if (!reportElement) return;

    setIsDownloading(true);
    try {
        const canvas = await html2canvas(reportElement as HTMLElement, {
            scale: 2,
            backgroundColor: '#FFFFFF', // Pure white for PDF background
            useCORS: true,
            windowWidth: 1100 // Force a wider canvas for better layout
        });

        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4');
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const imgProps = pdf.getImageProperties(imgData);
        const imgHeight = (imgProps.height * pdfWidth) / imgProps.width;
        
        let heightLeft = imgHeight;
        let position = 0;
        
        pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeight);
        heightLeft -= pdfHeight;
        
        while (heightLeft > 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeight);
            heightLeft -= pdfHeight;
        }
        pdf.save(`Nexus-Report-${parameters.reportName.replace(/\s+/g, '-')}.pdf`);
    } catch (e) {
        console.error("Failed to generate PDF", e);
    } finally {
        setIsDownloading(false);
    }
  };


  const addSymbiosisHooks = () => {
    if (!reportContainerRef.current) return;

    const interactiveElements = reportContainerRef.current.querySelectorAll('.nsil-interactive');
    
    interactiveElements.forEach(el => {
      const element = el as HTMLElement;
      if (element.querySelector('.symbiosis-trigger')) return; // Avoid adding multiple triggers

      const title = element.dataset.symbiosisTitle || 'this topic';
      const content = element.dataset.symbiosisContent || element.innerText;

      const button = document.createElement('button');
      button.className = 'symbiosis-trigger absolute top-2 right-2 p-1 text-nexus-accent-gold hover:text-nexus-accent-cyan rounded-full hover:bg-nexus-surface-700 transition-all opacity-50 group-hover:opacity-100';
      button.title = 'Start Symbiosis Chat';
      button.innerHTML = `<svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2L12 2C17.5228 2 22 6.47715 22 12V12"></path><path d="M22 12L22 12C22 17.5228 17.5228 22 12 22H12"></path><path d="M12 22L12 22C6.47715 22 2 17.5228 2 12V12"></path><path d="M2 12L2 12C2 6.47715 6.47715 2 12 2H12"></path><path d="M9 15L12 12L15 15"></path><path d="M12 12L12 9"></path></svg>`;

      button.onclick = (e) => {
        e.stopPropagation();
        onStartSymbiosis({
          topic: title,
          originalContent: content,
          reportParameters: parameters
        });
      };

      element.classList.add('relative', 'group');
      element.appendChild(button);
    });
  };

  useEffect(() => {
    addSymbiosisHooks();
  }, [content, parameters, onStartSymbiosis]);


  const reportParts = useMemo(() => {
    if (!content) return [];
    
    const chartSplitRegex = /(<nsil:chart>[\s\S]*?<\/nsil:chart>)/g;
    let processedContent = content;

    // NSIL Tag Transformations to HTML
    processedContent = processedContent.replace(/<nsil:executive_summary>([\s\S]*?)<\/nsil:executive_summary>/g, '<div class="nsil-interactive nsil-summary p-4 border-l-4 border-nexus-accent-cyan bg-nexus-primary-800/60 my-4 rounded-r-lg" data-symbiosis-title="Executive Summary" data-symbiosis-content="$1"><h3>Executive Summary</h3>$1</div>');
    processedContent = processedContent.replace(/<nsil:confidence_flag level="(\w+)" reason="(.*?)">([\s\S]*?)<\/nsil:confidence_flag>/g, (match, level, reason, text) => {
        return `<span class="nsil-confidence-flag relative group cursor-help border-b-2 border-dashed border-yellow-500/50 text-yellow-400">
                    ${text}
                    <span class="absolute -top-2 left-1/2 -translate-x-1/2 -translate-y-full w-max max-w-xs bg-nexus-text-primary text-nexus-primary-900 text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none border border-nexus-border-medium shadow-lg z-10">
                        <strong class="text-yellow-400">AI Confidence Note (${level}):</strong> ${reason}
                    </span>
                </span>`;
    });
    processedContent = processedContent.replace(/<nsil:match_score value="([\d.]*)">([\s\S]*?)<\/nsil:match_score>/g, '<div class="nsil-score my-6 text-center"><div class="text-6xl font-bold text-nexus-accent-gold">$1</div><p class="text-nexus-text-secondary mt-2">$2</p></div>');
    processedContent = processedContent.replace(/<nsil:risk_map>([\s\S]*?)<\/nsil:risk_map>/g, '<div class="nsil-riskmap my-6"><h3>Risk & Opportunity Map</h3><div class="grid md:grid-cols-3 gap-4 mt-2">$1</div></div>');
    processedContent = processedContent.replace(/<nsil:zone color="(\w+)" title="(.*?)">([\s\S]*?)<\/nsil:zone>/g, (match, color, title, text) => {
        const colorClasses = {
            green: 'border-green-500 bg-green-900/20',
            yellow: 'border-yellow-500 bg-yellow-900/20',
            red: 'border-red-500 bg-red-900/20'
        }[color] || 'border-gray-500';
        return `<div class="nsil-interactive nsil-zone border-t-4 ${colorClasses} p-4 rounded-b-lg bg-nexus-surface-800" data-symbiosis-title="Risk Zone: ${title}" data-symbiosis-content="${text}"><h5 class="font-bold text-nexus-text-primary">${title}</h5><p class="text-sm text-nexus-text-secondary mt-1">${text}</p></div>`
    });
    processedContent = processedContent.replace(/<nsil:source_attribution>([\s\S]*?)<\/nsil:source_attribution>/g, '<div class="nsil-source my-4 text-xs text-nexus-text-muted p-3 bg-nexus-primary-800/50 rounded-lg"><h4>Source Attribution</h4>$1</div>');

    const parts = processedContent.split(chartSplitRegex);

    return parts.map((part, index) => {
        if (part.startsWith('<nsil:chart>')) {
            const json = part.replace(/<\/?nsil:chart>/g, '');
            return { type: 'chart', content: json, key: `chart-${index}` };
        }
        
        if (!part.trim()) return null;
        
        const html = marked.parse(part);
        return { type: 'html', content: html, key: `html-${index}` };
    }).filter(Boolean);
  }, [content]);

  return (
    <div>
        <header className="sticky top-20 z-10 p-4 bg-white/80 backdrop-blur-sm border-b border-nexus-border-medium flex justify-between items-center flex-shrink-0">
            <div>
                <h2 className="text-xl font-bold text-nexus-text-primary truncate pr-4" title={parameters.reportName}>{parameters.reportName || "Strategic Blueprint"}</h2>
                <p className="text-sm text-nexus-text-secondary">{parameters.region} - {parameters.industry.join(' / ')}</p>
            </div>
            <div className="flex items-center space-x-4">
                <button
                    onClick={onGenerateLetter}
                    className="bg-nexus-accent-cyan text-white font-bold py-2 px-4 rounded-lg hover:bg-nexus-accent-cyan-dark transition-colors flex items-center gap-2"
                >
                    <LetterIcon className="w-5 h-5" />
                    Outreach Letter
                </button>
                <button
                    onClick={onReset}
                    className="nexus-button-secondary"
                >
                    New Report
                </button>
                <button
                    onClick={handleDownloadPdf}
                    disabled={isGenerating || isDownloading}
                    className="bg-nexus-accent-gold text-nexus-text-primary font-bold py-2 px-4 rounded-lg hover:bg-nexus-accent-gold-dark transition-all disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center gap-2"
                >
                    <DownloadIcon className="w-5 h-5" />
                    {isDownloading ? 'Downloading...' : 'Download PDF'}
                </button>
            </div>
        </header>
      <div ref={reportContainerRef} role="document">
        <div className="max-w-5xl mx-auto p-4 md:p-8">
            <div className="report-document-container shadow-2xl">
                <div className="blueprint-render-area">
                    <ReportMetadata parameters={parameters} />
                    <div className="blueprint-content">
                        {error && (
                            <div className="mb-6 p-4 rounded-lg bg-red-100 border border-red-300 text-red-800">
                                <h3 className="font-bold text-lg mb-2">Report Generation Error</h3>
                                <p>{error}</p>
                            </div>
                        )}
                        <ReportDisclaimer />

                        {reportParts.map((part) => {
                            if (!part) return null;
                            if (part.type === 'html') {
                            return <div key={part.key} dangerouslySetInnerHTML={{ __html: part.content }} />;
                            }
                            if (part.type === 'chart') {
                            return <NsilChart key={part.key} jsonString={part.content} />;
                            }
                            return null;
                        })}
                        
                        {isGenerating && (
                            <ReportLoadingIndicator />
                        )}

                        {!isGenerating && content && <ReportFooter />}
                    </div>
                </div>
            </div>
        </div>
      </div>
    </div>
  );
};

export default ReportViewer;
